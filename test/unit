#!/usr/bin/env bash

testKeyValue() {
  local store

  store=$(mktemp)

  kv_create "$store"

  kv_set "$store" key value
  kv_set "$store" foo bar
  kv_set "$store" key other_value
  kv_set "$store" bar baz

  assertEquals "other_value" "$(kv_get "$store" key)"
  assertEquals "bar" "$(kv_get "$store" foo)"
  assertEquals "baz" "$(kv_get "$store" bar)"

  # if the key isn't there it should return an empty string
  assertEquals "" "$(kv_get "$store" not_there)"

  # kv_keys returns each key on a new line
  assertEquals "$(printf "%s\n" bar foo key)" "$(kv_keys "$store")"

  # kv_list returns key=value on individual lines
  assertEquals "$(printf "%s\n" bar=baz foo=bar key=other_value)" "$(kv_list "$store")"

  # calling create on an existing store doesn't erase it
  kv_create "$store"
  assertEquals "$(printf "%s\n" bar=baz foo=bar key=other_value)" "$(kv_list "$store")"

  # now clear the store
  kv_clear "$store"

  assertEquals "" "$(kv_get "$store" key)"
  assertEquals "" "$(kv_keys "$store")"
  assertEquals "" "$(kv_list "$store")"
}

testKeyValueNoNewLine() {
  local store

  # use a fixture that does not have an empty line after the final entry
  store="$(pwd)/test/unit-fixtures/kvstore/no-new-line"

  assertEquals "$(printf "%s\n" a=b b=c)" "$(kv_list "$store")"
  assertEquals "$(printf "%s\n" a b)" "$(kv_keys "$store")" 
}

testKeyValueEmptyLine() {
  local store

  # use a fixture that has an extra empty line
  store="$(pwd)/test/unit-fixtures/kvstore/empty-line"

  assertEquals "$(printf "%s\n" a=b b=c)" "$(kv_list "$store")"
  assertEquals "$(printf "%s\n" a b)" "$(kv_keys "$store")" 
}

testKeyValueEscaping() {
  local store
  store=$(mktemp)

  kv_create "$store"

  kv_set "$store" "key" "value with a space"
  assertEquals "key=\"value with a space\"" "$(kv_list "$store")"
  assertEquals "value with a space" "$(kv_get "$store" "key")"
}

# if the file doesn't exist, everything should be a no-op
testKeyValueNoFile() {
  # empty file argument
  local empty=""

  kv_set $empty key value

  assertEquals "$(kv_get $empty key)" ""
  assertEquals "$(kv_keys $empty)" ""
  assertEquals "$(kv_list $empty)" ""

  local store="/tmp/does-not-exist"

  kv_set "$store" key value

  assertEquals "" "$(kv_get "$store" key)"
  assertEquals "" "$(kv_keys "$store")"
  assertEquals "" "$(kv_list "$store")"

  # running these commands has not created this file
  assertTrue "[[ ! -e $store ]]"

  local space=" "
  kv_set "$space" key value

  assertEquals "$(kv_get "$space" key)" ""
  assertEquals "$(kv_keys "$space")" ""
  assertEquals "$(kv_list "$space")" ""
}


# the module to be tested
# shellcheck source=stdlib.sh
source "$(pwd)"/stdlib.sh

# import the testing framework
# shellcheck disable=SC1090
source "$(pwd)"/test/shunit2
